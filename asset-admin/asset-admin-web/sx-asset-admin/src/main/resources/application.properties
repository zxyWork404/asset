# ===================================
# 小程序推送模版
# ===================================
spring.template.id=h3_tBFyHNtyUQQ2ZLn06LJZCAnQIEnu9C-q3pPe3BL4
spring.template.appid=wx387f2dd400f31535
spring.template.path=pages/index/index

# ===================================
#  kafka配置文件
# ===================================
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=topic_messages
spring.kafka.listener.missing-topics-fatal=false
spring.kafka.listener.concurrency=3
spring.kafka.properties.linger.ms=1

#=============== producer  =======================
spring.kafka.producer.client-id=${spring.application.name}
# 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
# 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
spring.kafka.producer.retries=0
# 每次批量发送消息的数量,produce积累到一定数据，一次发送
spring.kafka.producer.batch-size=16384
# produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#request.required.acks有三个值 0 1 -1
#0:生产者不会等待broker的ack，这个延迟最低但是存储的保证最弱当server挂掉的时候就会丢数据
#1：服务端会等待ack值 leader副本确认接收到消息后发送ack但是如果leader挂掉后他不确保是否复制完成新leader也会导致数据丢失
#-1：同样在1的基础上 服务端会等所有的follower的副本受到数据后才会受到leader发出的ack，这样数据不会丢
spring.kafka.producer.acks=-1